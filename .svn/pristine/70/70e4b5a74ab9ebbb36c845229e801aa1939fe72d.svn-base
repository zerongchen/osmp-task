package cu.aotain.osmp.task.service.impl;

import com.alibaba.fastjson.JSON;
import com.aotain.cu.serviceapi.dto.*;
import com.aotain.cu.serviceapi.model.PageResult;
import com.aotain.cu.serviceapi.model.ServiceDomainInformation;
import com.aotain.cu.serviceapi.model.UserInformation;
import com.aotain.cu.serviceapi.utils.BaseFeignBuilder;
import com.csvreader.CsvReader;
import cu.aotain.osmp.task.service.CrmsAndIpcFileHandle;
import cu.aotain.osmp.task.service.ProcessService;
import cu.aotain.osmp.task.service.UserInfo;
import cu.aotain.osmp.task.serviceapi.UserInfoServiceApi;
import cu.aotain.osmp.task.serviceapi.UserInfoServiceApiHystrix;
import cu.aotain.osmp.task.util.FileTools;
import io.swagger.models.auth.In;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.util.*;

@Service
public class IpcProcessServiceImpl extends CrmsAndIpcFileHandle<Map<String,TreeMap<Long,UserServiceInformationDTO>>> implements ProcessService {

    private static Map<String ,String > paramMap =new HashMap<>();
    private static Logger logger = LoggerFactory.getLogger(IpcProcessServiceImpl.class);
    private Map<String ,String > dataMap;
    private UserInfoServiceApi api ;
    private Map<String,Map<Long,String>> errorMap;

    @Override
    protected boolean validate( Map<Long ,String> content, File verFile ) {
        if (content.size()==(int) info.getVerificationMap().get("IPC").get(verFile.getName())){
            return true;
        }
        return false;
    }

    @Override
    protected void doVerifiyInfo( File file ) {
        try {
            // 创建CSV读对象
            CsvReader csvReader = FileTools.createCsvReader(file);
            // 读表头
            csvReader.readHeaders();
            HashMap<String,Object> map = new HashMap<String,Object>();
            while (csvReader.readRecord()){
                map.put( csvReader.get(1), Integer.parseInt(csvReader.get(2)));
            }
            info.getVerificationMap().put("IPC",map);
            csvReader.close();
        } catch (Exception e) {
            logger.error("error get data from "+file.getName(),e);
        }
    }

    @Override
    protected Map<String,TreeMap<Long ,String > > process( String dataPath ) {

        File folder = new File(dataPath);
        File[] templates = folder.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File dir, String name) {
                if ("csv".equals(FilenameUtils.getExtension(name)) && !name.startsWith("verification_")) {
                    return true;
                }
                return false;
            }
        });
        if (templates.length<1) return null;
        Map<String,TreeMap<Long ,String >> map  = new HashMap<>();
        for (File file:templates){
            CsvReader csvReader = FileTools.createCsvReader(file);
            TreeMap<Long,String> contentMap  = new TreeMap<>();
            try {
                csvReader.readHeaders();
                Long rowNum=1l;
                while (csvReader.readRecord()){
                    contentMap.put(rowNum++,csvReader.getRawRecord());
                }
                map.put(file.getName(),contentMap);
            } catch (IOException e) {
                logger.error("",e);
                return null;
            }
        }
        return map;
    }

    @Override
    protected String returnType() {
        return "bsmp_icp";
    }

    @Override
    protected void setValue( String k, String v ) {
        paramMap.put(k,v);
    }

    @Override
    protected String getValue( String k ) {
        return paramMap.get(k);
    }

    @Override
    protected Map<String,TreeMap<Long,UserServiceInformationDTO>> constructUserObj( Map<String, TreeMap<Long, String>> contents ) {

        Map<String,TreeMap<Long,UserServiceInformationDTO>> userServices = new HashMap<String,TreeMap<Long,UserServiceInformationDTO>>();

        contents.forEach((k,v)->{
            if (api==null){
                api= BaseFeignBuilder.getCacheFeign(UserInfoServiceApi.class, "myclient", new UserInfoServiceApiHystrix(), BaseFeignBuilder.EncodeDecodeType.EDT_JSON_JSON);
            }
            TreeMap<Long,UserServiceInformationDTO> userDatas = new TreeMap<Long,UserServiceInformationDTO>();
            v.forEach((rowNum,rowVaue)->{
                try {
                    String[] cont = rowVaue.split(",");
                    UserServiceInformationDTO information = new UserServiceInformationDTO();
                    //处理逻辑
                    information.setUnitName(cont[1]);
                    information.setUnitNature(Integer.parseInt(getValueFormRedis("IDC_JCDM_YHSX",cont[3])));
                    information.setIdType(Integer.parseInt(getValueFormRedis("IDC_JCDM_ZJLX",cont[6])));
                    information.setIdNumber(cont[7]);
                    information.setRegisterId(cont[23]);
                    information.setServiceContent(cont[24]);
                    if (StringUtils.isEmpty(cont[23])){
                        String[] domains = cont[22].split(",");
                        List<ServiceDomainInformation> list = new ArrayList<>();
                        for (String domain:domains){
                            ServiceDomainInformation domainInformation = new ServiceDomainInformation();
                            domainInformation.setDomainName(domain);
                            list.add(domainInformation);
                        }
                        information.setDomainList(list);
                    }
                    information.setSetmode(Integer.parseInt(getValueFormRedis("IDC_JCDM_JRFS",cont[34])));
                    setAreaCodeByAddress(information,cont[35]);
                    information.setCityCodeList(Arrays.asList(information.getAreaCode()));
                    information.setCreateUserId(-3);
                    information.setUpdateUserId(-3);
                    userDatas.put(rowNum,information);
                }catch (Exception e){
                    logger.error("parse txt param error",e);
                    constructUserServiceErrorFile(k,rowNum,"参数解析有误");
                }
            });
            userServices.put(k,userDatas);
        });
       return userServices;
    }

    private void constructUserServiceErrorFile( String fileName, Long rowNum, String msg ) {
        if (errorMap!=null){
            Map<Long,String> content = errorMap.get(fileName);
            if (content==null){
                content=new HashMap<>();
                content.put(rowNum,msg);
            }else {
                content.put(rowNum,msg);
            }
            errorMap.put(fileName,content);
        }else {
            errorMap=new HashMap<>();
            constructUserServiceErrorFile(fileName,rowNum,msg);
        }
    }

    @Override
    protected void end() {

    }

    @Override
    public void execute() {

        Map<String,TreeMap<Long,UserServiceInformationDTO>> userInfo = returnHanderFile();
        //get current data
        if (userInfo!=null ) {
            api = BaseFeignBuilder.getCacheFeign(UserInfoServiceApi.class, "myclient", new UserInfoServiceApiHystrix(), BaseFeignBuilder.EncodeDecodeType.EDT_JSON_JSON);
            UserServiceInformationDTO userparam= new UserServiceInformationDTO();
            userparam.setIsPaging(0);
            PageResult<UserServiceInformationDTO> userPageResult = api.getServices(userparam);
            List<UserServiceInformationDTO> tableResult = userPageResult.getRows();

            Map<String,TreeMap<Long,UserServiceInformationDTO>> addUserServiceFileMap = new HashMap<String,TreeMap<Long,UserServiceInformationDTO>>();
            Map<String,TreeMap<Long,UserServiceInformationDTO>> modifyUserServiceFileMap = new HashMap<String,TreeMap<Long,UserServiceInformationDTO>>();
            List<UserServiceInformationDTO> commonUser = new ArrayList<>();
            List<UserServiceInformationDTO> deleteUserServiceList = new ArrayList<>();

            if (tableResult!=null && tableResult.size()>0 ){
                userInfo.forEach((fileName,fileValue)->{
                    TreeMap<Long,UserServiceInformationDTO> addUserMap = new TreeMap<Long,UserServiceInformationDTO>();
                    TreeMap<Long,UserServiceInformationDTO> modifyUserMap = new TreeMap<Long,UserServiceInformationDTO>();
                    loop1:fileValue.forEach((rowNum,rowValue)->{
                        boolean flag = false;
                        loop2:for (UserServiceInformationDTO tableDto:tableResult){
                            flag = false;
                            if (rowValue.getUnitName().equals(tableDto.getUnitName())){
                                flag=true;
                                commonUser.add(tableDto);
                                rowValue.setUserId(tableDto.getUserId());
                                rowValue.setServiceId(tableDto.getServiceId());
                                List<ServiceDomainInformation> fileDomain = rowValue.getDomainList();
                                List<ServiceDomainInformation> tableDomain = tableDto.getDomainList();
                                List<ServiceDomainInformation> domainList = new ArrayList<>();
                                if (tableDomain!=null && !tableDomain.isEmpty()){
                                  if (fileDomain!=null && !fileDomain.isEmpty()){
                                      loop3:for (ServiceDomainInformation fileInfo:fileDomain){
                                          loop4:for (ServiceDomainInformation tableInfo:tableDomain){
                                              if (fileInfo.getDomainName().equals(tableInfo.getDomainName())){
                                                  fileInfo.setDomainId(tableInfo.getDomainId());
                                                  domainList.add(fileInfo);
                                                  break loop4;
                                              }
                                          }
                                          domainList.add(fileInfo);
                                      }
                                  }
                                }
                                rowValue.setDomainList(domainList);
                                modifyUserMap.put(rowNum,rowValue);
                                break loop2;
                            }
                        }
                        if (!flag){
                            addUserMap.put(rowNum,rowValue);
                        }
                    });
                    modifyUserServiceFileMap.put(fileName,modifyUserMap);
                    addUserServiceFileMap.put(fileName,addUserMap);

                    deleteUserServiceList.addAll(tableResult);
                    deleteUserServiceList.removeAll(commonUser);
                });
            }else {
                addUserServiceFileMap.putAll(userInfo);
            }
            insert(addUserServiceFileMap);
            update(modifyUserServiceFileMap);
            delete(deleteUserServiceList);
        }
    }

    private void insert(Map<String,TreeMap<Long,UserServiceInformationDTO>> map){
        if (map==null && map.isEmpty()) return;
        map.forEach((fileName,fileValue)->{
            List<UserServiceInformationDTO> dtoList = new ArrayList<>();
            Long row = 0l;
            Map<Long,Long > rowMap = new HashMap<>();
            for (Long key:fileValue.keySet()){
                dtoList.add(fileValue.get(key));
                rowMap.put(row++,key);
            }
            ResultDto resultDto = api.insertServices(dtoList);
            if (resultDto.getResultCode()!=ResultDto.ResultCodeEnum.SUCCESS.getCode()){
                Map<String, AjaxValidationResult> resultMap = resultDto.getAjaxValidationResultMap();
                resultMap.forEach((k,v)->{
                    Map<String, Object[]> error =  v.getErrorsArgsMap();
                    if (error!=null && error.isEmpty()){
                        constructUserServiceErrorFile(fileName,rowMap.get(Long.valueOf(k)), JSON.toJSONString(error.values()));
                    }
                });
            }

        });
    }
    private void update(Map<String,TreeMap<Long,UserServiceInformationDTO>> map){
        if (map==null && map.isEmpty()) return;
        map.forEach((fileName,fileValue)->{
            List<UserServiceInformationDTO> dtoList = new ArrayList<>();
            Long row = 0l;
            Map<Long,Long > rowMap = new HashMap<>();
            for (Long key:fileValue.keySet()){
                dtoList.add(fileValue.get(key));
                rowMap.put(row++,key);
            }
            ResultDto resultDto = api.updateServices(dtoList);
            if (resultDto.getResultCode()!=ResultDto.ResultCodeEnum.SUCCESS.getCode()){
                Map<String, AjaxValidationResult> resultMap = resultDto.getAjaxValidationResultMap();
                resultMap.forEach((k,v)->{
                    Map<String, Object[]> error =  v.getErrorsArgsMap();
                    if (error!=null && error.isEmpty()){
                        constructUserServiceErrorFile(fileName,rowMap.get(Long.valueOf(k)),JSON.toJSONString(error.values()));
                    }
                });
            }

        });
    }
    private void delete(List<UserServiceInformationDTO> list){
        api.deleteServices(list);
    }
}
